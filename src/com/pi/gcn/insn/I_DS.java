package com.pi.gcn.insn;

import com.pi.gcn.ds.DS;
import com.pi.gcn.ds.DS.DS_SCI;
import com.pi.gcn.ds.DS.DS_VI;
import com.pi.gcn.ds.DS_Base;
import com.pi.gcn.proc.SubtargetFeature;

public class I_DS {
	public static void register(InstructionSet s) {
		Class<? extends DS_Base> format = s.processor.has(SubtargetFeature.VolcanicIslands) ? DS_VI.class
				: DS_SCI.class;
		s.add("DS_ADD_U32", format, 0);
		s.add("DS_SUB_U32", format, 1);
		s.add("DS_RSUB_U32", format, 2);
		s.add("DS_INC_U32", format, 3);
		s.add("DS_DEC_U32", format, 4);
		s.add("DS_MIN_I32", format, 5);
		s.add("DS_MAX_I32", format, 6);
		s.add("DS_MIN_U32", format, 7);
		s.add("DS_MAX_U32", format, 8);
		s.add("DS_AND_B32", format, 9);
		s.add("DS_OR_B32", format, 10);
		s.add("DS_XOR_B32", format, 11);
		s.add("DS_MSKOR_B32", format, 12);
		s.add("DS_WRITE_B32", format, 13);
		s.add("DS_WRITE2_B32", format, 14);
		s.add("DS_WRITE2ST64_B32", format, 15);
		s.add("DS_CMPST_B32", format, 16);
		s.add("DS_CMPST_F32", format, 17);
		s.add("DS_MIN_F32", format, 18);
		s.add("DS_MAX_F32", format, 19);
		s.add("DS_NOP Do nothing.", format, 20);
		s.add("DS_ADD_F32", format, 21);
		s.add("DS_WRITE_B8", format, 30);
		s.add("DS_WRITE_B16", format, 31);
		s.add("DS_ADD_RTN_U32", format, 32);
		s.add("DS_SUB_RTN_U32", format, 33);
		s.add("DS_RSUB_RTN_U32", format, 34);
		s.add("DS_INC_RTN_U32", format, 35);
		s.add("DS_DEC_RTN_U32", format, 36);
		s.add("DS_MIN_RTN_I32", format, 37);
		s.add("DS_MAX_RTN_I32", format, 38);
		s.add("DS_MIN_RTN_U32", format, 39);
		s.add("DS_MAX_RTN_U32", format, 40);
		s.add("DS_AND_RTN_B32", format, 41);
		s.add("DS_OR_RTN_B32", format, 42);
		s.add("DS_XOR_RTN_B32", format, 43);
		s.add("DS_MSKOR_RTN_B32", format, 44);
		s.add("DS_WRXCHG_RTN_B32", format, 45);
		s.add("DS_WRXCHG2_RTN_B32", format, 46);
		s.add("DS_WRXCHG2ST64_RTN_B32", format, 47);
		s.add("DS_CMPST_RTN_B32", format, 48);
		s.add("DS_CMPST_RTN_F32", format, 49);
		s.add("DS_MIN_RTN_F32", format, 50);
		s.add("DS_MAX_RTN_F32", format, 51);
		s.add("DS_WRAP_RTN_B32", format, 52);
		s.add("DS_SWIZZLE_B32", format, 61);
		s.add("DS_READ_B32", format, 54);
		s.add("DS_READ2_B32", format, 55);
		s.add("DS_READ2ST64_B32", format, 56);
		s.add("DS_READ_I8", format, 57);
		s.add("DS_READ_U8", format, 58);
		s.add("DS_READ_I16", format, 59);
		s.add("DS_READ_U16", format, 60);
		s.add("DS_PERMUTE_B32", format, 62);
		s.add("DS_BPERMUTE_B32", format, 63);
		s.add("DS_ADD_U64", format, 64);
		s.add("DS_SUB_U64", format, 65);
		s.add("DS_RSUB_U64", format, 66);
		s.add("DS_INC_U64", format, 67);
		s.add("DS_DEC_U64", format, 68);
		s.add("DS_MIN_I64", format, 69);
		s.add("DS_MAX_I64", format, 70);
		s.add("DS_MIN_U64", format, 71);
		s.add("DS_MAX_U64", format, 72);
		s.add("DS_AND_B64", format, 73);
		s.add("DS_OR_B64", format, 74);
		s.add("DS_XOR_B64", format, 75);
		s.add("DS_MSKOR_B64", format, 76);
		s.add("DS_WRITE_B64", format, 77);
		s.add("DS_WRITE2_B64", format, 78);
		s.add("DS_WRITE2ST64_B64", format, 79);
		s.add("DS_CMPST_B64", format, 80);
		s.add("DS_CMPST_F64", format, 81);
		s.add("DS_MIN_F64", format, 82);
		s.add("DS_MAX_F64", format, 83);
		s.add("DS_ADD_RTN_U64", format, 96);
		s.add("DS_SUB_RTN_U64", format, 97);
		s.add("DS_RSUB_RTN_U64", format, 98);
		s.add("DS_INC_RTN_U64", format, 99);
		s.add("DS_DEC_RTN_U64", format, 100);
		s.add("DS_MIN_RTN_I64", format, 101);
		s.add("DS_MAX_RTN_I64", format, 102);
		s.add("DS_MIN_RTN_U64", format, 103);
		s.add("DS_MAX_RTN_U64", format, 104);
		s.add("DS_AND_RTN_B64", format, 105);
		s.add("DS_OR_RTN_B64", format, 106);
		s.add("DS_XOR_RTN_B64", format, 107);
		s.add("DS_MSKOR_RTN_B64", format, 108);
		s.add("DS_WRXCHG_RTN_B64", format, 109);
		s.add("DS_WRXCHG2_RTN_B64", format, 110);
		s.add("DS_WRXCHG2ST64_RTN_B64", format, 111);
		s.add("DS_CMPST_RTN_B64", format, 112);
		s.add("DS_CMPST_RTN_F64", format, 113);
		s.add("DS_MIN_RTN_F64", format, 114);
		s.add("DS_MAX_RTN_F64", format, 115);
		s.add("DS_READ_B64", format, 118);
		s.add("DS_READ2_B64", format, 119);
		s.add("DS_READ2ST64_B64", format, 120);
		s.add("DS_CONDXCHG32_RTN_B64", format, 126);
		s.add("DS_ADD_SRC2_U32", format, 128);
		s.add("DS_SUB_SRC2_U32", format, 129);
		s.add("DS_RSUB_SRC2_U32", format, 130);
		s.add("DS_INC_SRC2_U32", format, 131);
		s.add("DS_DEC_SRC2_U32", format, 132);
		s.add("DS_MIN_SRC2_I32", format, 133);
		s.add("DS_MAX_SRC2_I32", format, 134);
		s.add("DS_MIN_SRC2_U32", format, 135);
		s.add("DS_MAX_SRC2_U32", format, 136);
		s.add("DS_AND_SRC2_B32", format, 137);
		s.add("DS_OR_SRC2_B32", format, 138);
		s.add("DS_XOR_SRC2_B32", format, 139);
		s.add("DS_WRITE_SRC2_B32", format, 140);
		s.add("DS_MIN_SRC2_F32", format, 146);
		s.add("DS_MAX_SRC2_F32", format, 147);
		s.add("DS_GWS_SEMA_RELEASE_ALL", format, 152);
		s.add("DS_GWS_INIT", format, 153);
		s.add("DS_GWS_SEMA_V", format, 154);
		s.add("DS_GWS_SEMA_BR", format, 155);
		s.add("DS_GWS_SEMA_P", format, 156);
		s.add("DS_GWS_BARRIER", format, 157);
		s.add("DS_CONSUME", format, 189);
		s.add("DS_APPEND", format, 190);
		s.add("DS_ORDERED_COUNT", format, 191);
		s.add("DS_ADD_SRC2_U64", format, 192);
		s.add("DS_SUB_SRC2_U64", format, 193);
		s.add("DS_RSUB_SRC2_U64", format, 194);
		s.add("DS_INC_SRC2_U64", format, 195);
		s.add("DS_DEC_SRC2_U64", format, 196);
		s.add("DS_MIN_SRC2_I64", format, 197);
		s.add("DS_MAX_SRC2_I64", format, 198);
		s.add("DS_MIN_SRC2_U64", format, 199);
		s.add("DS_MAX_SRC2_U64", format, 200);
		s.add("DS_AND_SRC2_B64", format, 201);
		s.add("DS_OR_SRC2_B64", format, 202);
		s.add("DS_XOR_SRC2_B64", format, 203);
		s.add("DS_WRITE_SRC2_B64", format, 204);
		s.add("DS_MIN_SRC2_F64", format, 210);
		s.add("DS_MAX_SRC2_F64", format, 211);
		s.add("DS_WRITE_B96", format, 222);
		s.add("DS_WRITE_B128", format, 223);
		s.add("DS_CONDXCHG32_RTN_B128", format, 253);
		s.add("DS_READ_B96", format, 254);
		s.add("DS_READ_B128", format, 255);
	}
}
